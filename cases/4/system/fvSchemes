/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.0                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default 		Euler;
}

gradSchemes
{
    default         Gauss linear;
}

divSchemes
{
//    default         none;
//    div(phi,U)      Gauss linearUpwindV Gauss linear;
//    div(phi,k)      Gauss upwind;
//    div(phi,epsilon) Gauss upwind;
//    div(phi,omega)  Gauss upwind;
//    div((nuEff*dev(T(grad(U))))) Gauss linear;

//    div(phi,U)      bounded Gauss linearUpwind grad(U);
//    div(phi,nuTilda) bounded Gauss linearUpwind grad(nuTilda);
//    div((nuEff*dev2(T(grad(U))))) Gauss linear;

    default         none;
    div(phi,U)      bounded Gauss linearUpwind grad(U);
    div(phi,k)      bounded Gauss limitedLinear 1;
    div(phi,epsilon) bounded Gauss limitedLinear 1;
    div(phi,omega)  bounded Gauss limitedLinear 1;
    div(phi,v2)     bounded Gauss limitedLinear 1;
    div((nuEff*dev2(T(grad(U))))) Gauss linear;
    div(nonlinearStress) Gauss linear;
    div(phi,C)      Gauss vanLeer;
}

laplacianSchemes
{
    default         Gauss linear corrected;
    limitedScheme   localMin;
}

interpolationSchemes
{
    default         linear;
    interpolate(U)  linear;
}

snGradSchemes
{
    default         corrected;
}


// ************************************************************************* //
